{
  "Svelte Component": {
    "prefix": "sveltecomp",
    "body": [
      "<script lang=\"ts\">",
      "\t// 导入",
      "\timport type { ${1:TypeName} } from '${2:$lib/types}';",
      "",
      "\t// 属性",
      "\texport let ${3:propName}: ${4:string};",
      "",
      "\t// 响应式变量",
      "\tlet ${5:varName} = ${6:false};",
      "",
      "\t// 函数",
      "\tasync function handle${7:Action}() {",
      "\t\t${5:varName} = true;",
      "\t\ttry {",
      "\t\t\t${8:// TODO: 实现功能}",
      "\t\t} catch (error) {",
      "\t\t\tconsole.error('${9:操作失败}:', error);",
      "\t\t} finally {",
      "\t\t\t${5:varName} = false;",
      "\t\t}",
      "\t}",
      "</script>",
      "",
      "<!-- HTML -->",
      "<div class=\"${10:component-name}\">",
      "\t<h2>{${3:propName}}</h2>",
      "\t<button on:click={handle${7:Action}} disabled={${5:varName}}>",
      "\t\t{${5:varName} ? '${11:处理中...}' : '${12:按钮文本}'}",
      "\t</button>",
      "</div>",
      "",
      "<!-- CSS -->",
      "<style>",
      "\t.${10:component-name} {",
      "\t\t@apply ${13:p-4 border rounded-lg};",
      "\t}",
      "</style>"
    ],
    "description": "创建完整的 Svelte 组件"
  },
  "Svelte Page": {
    "prefix": "sveltepage",
    "body": [
      "<script lang=\"ts\">",
      "\timport type { PageData } from './$types';",
      "",
      "\texport let data: PageData;",
      "</script>",
      "",
      "<svelte:head>",
      "\t<title>${1:页面标题}</title>",
      "\t<meta name=\"description\" content=\"${2:页面描述}\" />",
      "</svelte:head>",
      "",
      "<section>",
      "\t<div class=\"container mx-auto px-4\">",
      "\t\t<h1 class=\"text-3xl font-bold mb-6\">${1:页面标题}</h1>",
      "\t\t${3:<!-- 页面内容 -->}",
      "\t</div>",
      "</section>"
    ],
    "description": "创建 SvelteKit 页面"
  },
  "Svelte API Call": {
    "prefix": "svelteapi",
    "body": [
      "async function ${1:functionName}() {",
      "\ttry {",
      "\t\tconst ${2:result} = await apiPost<${3:ResponseType}>('${4:/api/endpoint}', {",
      "\t\t\t${5:data}: ${6:value}",
      "\t\t});",
      "\t\t${7:// 处理成功响应}",
      "\t\treturn ${2:result};",
      "\t} catch (error) {",
      "\t\tconsole.error('${8:API 调用失败}:', error);",
      "\t\tthrow error;",
      "\t}",
      "}"
    ],
    "description": "创建 API 调用函数"
  },
  "Svelte Store": {
    "prefix": "sveltestore",
    "body": [
      "import { writable } from 'svelte/store';",
      "import type { ${1:StoreType} } from '${2:$lib/types}';",
      "",
      "// 创建 store",
      "export const ${3:storeName} = writable<${1:StoreType}>(${4:initialValue});",
      "",
      "// Store 操作函数",
      "export const ${3:storeName}Actions = {",
      "\tset: (value: ${1:StoreType}) => ${3:storeName}.set(value),",
      "\tupdate: (updater: (value: ${1:StoreType}) => ${1:StoreType}) => ${3:storeName}.update(updater),",
      "\treset: () => ${3:storeName}.set(${4:initialValue}),",
      "\t${5:// 添加更多操作}",
      "};"
    ],
    "description": "创建 Svelte store"
  },
  "TypeScript Interface": {
    "prefix": "tsinterface",
    "body": [
      "// ${1:接口描述}",
      "export interface ${2:InterfaceName} {",
      "\tid: ${3:number};",
      "\t${4:propertyName}: ${5:string};",
      "\tcreatedAt: Date;",
      "\tupdatedAt: Date;",
      "\t${6:// 添加更多属性}",
      "}"
    ],
    "description": "创建 TypeScript 接口"
  },
  "TypeScript Type": {
    "prefix": "tstype",
    "body": [
      "// ${1:类型描述}",
      "export type ${2:TypeName} = {",
      "\t${3:propertyName}: ${4:string};",
      "\t${5:// 添加更多属性}",
      "};"
    ],
    "description": "创建 TypeScript 类型"
  },
  "Svelte Form": {
    "prefix": "svelteform",
    "body": [
      "<script lang=\"ts\">",
      "\timport type { ${1:FormData} } from '${2:$lib/types}';",
      "",
      "\tlet formData: ${1:FormData} = {",
      "\t\t${3:field}: '${4:defaultValue}'",
      "\t};",
      "",
      "\tlet loading = false;",
      "\tlet errors: Record<string, string> = {};",
      "",
      "\tasync function handleSubmit() {",
      "\t\tloading = true;",
      "\t\terrors = {};",
      "",
      "\t\ttry {",
      "\t\t\t// 表单验证",
      "\t\t\tif (!formData.${3:field}) {",
      "\t\t\t\terrors.${3:field} = '${5:字段不能为空}';",
      "\t\t\t\treturn;",
      "\t\t\t}",
      "",
      "\t\t\t// 提交表单",
      "\t\t\tconst result = await apiPost<${6:ResponseType}>('${7:/api/submit}', formData);",
      "\t\t\t${8:// 处理成功}",
      "\t\t} catch (error) {",
      "\t\t\tconsole.error('${9:提交失败}:', error);",
      "\t\t} finally {",
      "\t\t\tloading = false;",
      "\t\t}",
      "\t}",
      "</script>",
      "",
      "<form on:submit|preventDefault={handleSubmit} class=\"space-y-4\">",
      "\t<div>",
      "\t\t<label for=\"${3:field}\" class=\"block text-sm font-medium text-gray-700\">",
      "\t\t\t${10:字段标签}",
      "\t\t</label>",
      "\t\t<input",
      "\t\t\tid=\"${3:field}\"",
      "\t\t\ttype=\"${11:text}\"",
      "\t\t\tbind:value={formData.${3:field}}",
      "\t\t\tclass=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm\"",
      "\t\t\tclass:border-red-300={errors.${3:field}}",
      "\t\t\trequired",
      "\t\t/>",
      "\t\t{#if errors.${3:field}}",
      "\t\t\t<p class=\"mt-1 text-sm text-red-600\">{errors.${3:field}}</p>",
      "\t\t{/if}",
      "\t</div>",
      "",
      "\t<button",
      "\t\ttype=\"submit\"",
      "\t\tdisabled={loading}",
      "\t\tclass=\"w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 disabled:opacity-50\"",
      "\t>",
      "\t\t{loading ? '${12:提交中...}' : '${13:提交}'}",
      "\t</button>",
      "</form>"
    ],
    "description": "创建 Svelte 表单组件"
  }
}